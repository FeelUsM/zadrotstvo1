[main]
; The main block contains the mandatory fields for running and experiment.
name="translation"
tf_manager=<tf_manager>
output="output-cs-en-4000-10K"
batch_size=10
epochs=10
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<runner_greedy>]
evaluation=[("target_greedy", "target", <bleu>)]
logging_period=80
validation_period=2000
random_seed=333
initial_variables="output-cs-en-4000-10K/variables.data"
overwrite_output_dir=True

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=16
num_sessions=1
report_gpu_memory_consumption=True

[bpe_preprocess]
class=processors.bpe.BPEPreprocessor
merge_file="bpe_merges.4000.10K"

[bpe_postprocess]
class=processors.bpe.BPEPostprocessor

[bleu]
class=evaluators.bleu.BLEUEvaluator

[train_data]
; This is a definition of the training data object. Dataset is not a standard
; class, it treats the __init__ method's arguments as a dictionary, therefore
; the data series names can be any string, prefixed with "s_". To specify the
; output file for a series, use "s_" prefix and "_out" suffix, e.g.
; "s_target_out"
class=dataset.load_dataset_from_files
s_source="./train.cs.10K"
s_target="./train.en.10K"
preprocessors=[("source", "source_bpe", <bpe_preprocess>), ("target", "target_bpe", <bpe_preprocess>)]
lazy=True

[val_data]
; Validation data, the languages are not necessary here, encoders and decoders
; access the data series via the string identifiers defined here.
class=dataset.load_dataset_from_files
s_source="./test.cs"
s_target="./test.en"
preprocessors=[("source", "source_bpe", <bpe_preprocess>), ("target", "target_bpe", <bpe_preprocess>)]

[shared_vocabulary]
class=vocabulary.from_bpe
path="./bpe_merges.4000.10K"

[encoder]
class=encoders.sentence_encoder.SentenceEncoder
name="encoder"
rnn_size=128
max_input_len=50
embedding_size=64
dropout_keep_prob=1.0
attention_type=decoding_function.Attention
data_id="source_bpe"
vocabulary=<shared_vocabulary>

[decoder]
class=decoders.decoder.Decoder
name="decoder"
encoders=[<encoder>]
rnn_size=128
embedding_size=64
use_attention=True
dropout_keep_prob=1.0
data_id="target_bpe"
max_output_len=50
vocabulary=<shared_vocabulary>
conditional_gru=True

[trainer]
; This block just fills the arguments of the trainer __init__ method.
class=trainers.cross_entropy_trainer.CrossEntropyTrainer
decoders=[<decoder>]
l2_weight=1.0e-08
clip_norm=1.0

[runner_greedy]
class=runners.runner.GreedyRunner
output_series="target_greedy"
decoder=<decoder>
postprocess=<bpe_postprocess>
